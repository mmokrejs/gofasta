package alphabet

import (
	"errors"
	"fmt"
	"reflect"
	"strings"
	"testing"
	"unicode"

	"github.com/virus-evolution/gofasta/pkg/encoding"
)

func SpaceMap(str string) string {
	return strings.Map(func(r rune) rune {
		if unicode.IsSpace(r) {
			return -1
		}
		return r
	}, str)
}

func TestTranslate(t *testing.T) {
	spike_nuc_gb := SpaceMap(temp_spike_nuc_gb)
	spike_AA_gb := SpaceMap(temp_spike_AA_gb)

	translation, err := Translate(spike_nuc_gb, false)
	if err != nil {
		t.Error(err)
	}
	if translation != spike_AA_gb {
		t.Errorf("problem in TestTranslate()")
	}

	nuc := "AAAAA"
	translation, err = Translate(nuc, false)
	if err != ErrorCDSNotModThree {
		t.Error(err)
	}

	nuc = "ATN"
	translation, err = Translate(nuc, false)
	if err != nil {
		t.Error(err)
	}
	if translation != "X" {
		t.Errorf("Problem in TestTranslate()")
	}

	nuc = "ATN"
	translation, err = Translate(nuc, true)
	if !reflect.DeepEqual(err, errors.New("Translation error: Untranslatable codon: ATN")) {
		t.Error(err)
	}
}

func TestCodonDict(t *testing.T) {

	spike_nuc_gb := SpaceMap(temp_spike_nuc_gb)
	spike_AA_gb := SpaceMap(temp_spike_AA_gb)

	codonDict := MakeCodonDict()

	// test the routine on real (ACTG-only) data
	nuc_counter := 0
	AA_counter := 0
	nuc_array := make([]rune, 0)

	for _, nuc := range spike_nuc_gb {

		nuc_array = append(nuc_array, nuc)
		nuc_counter += 1

		if nuc_counter == 3 {
			codon := string(nuc_array)
			AA_translated := codonDict[codon]
			AA_genbank := string(spike_AA_gb[AA_counter])

			test := AA_translated == AA_genbank

			if !test {
				t.Errorf("problem in alphabet test: %s %s", AA_translated, AA_genbank)
			}

			nuc_array = make([]rune, 0)
			nuc_counter = 0
			AA_counter += 1
		}
	}

	nuc_map := make(map[rune]bool)
	nuc_map['A'] = true
	nuc_map['G'] = true
	nuc_map['C'] = true
	nuc_map['T'] = true

	lookupChar := make(map[string][]string)
	lookupChar["A"] = []string{"A"}
	lookupChar["C"] = []string{"C"}
	lookupChar["G"] = []string{"G"}
	lookupChar["T"] = []string{"T"}
	lookupChar["R"] = []string{"A", "G"}
	lookupChar["Y"] = []string{"C", "T"}
	lookupChar["S"] = []string{"G", "C"}
	lookupChar["W"] = []string{"A", "T"}
	lookupChar["K"] = []string{"G", "T"}
	lookupChar["M"] = []string{"A", "C"}
	lookupChar["B"] = []string{"C", "G", "T"}
	lookupChar["D"] = []string{"A", "G", "T"}
	lookupChar["H"] = []string{"A", "C", "T"}
	lookupChar["V"] = []string{"A", "C", "G"}
	lookupChar["N"] = []string{"A", "C", "G", "T"}

	// test the ambiguous codons
	for codon, AA := range codonDict {

		amb_present := false
		for _, nuc := range codon {
			if nuc_map[nuc] {
				continue
			} else {
				amb_present = true
				break
			}
		}

		if amb_present {

			pos1_set := lookupChar[string(codon[0])]
			pos2_set := lookupChar[string(codon[1])]
			pos3_set := lookupChar[string(codon[2])]

			for _, nuc1 := range pos1_set {
				for _, nuc2 := range pos2_set {
					for _, nuc3 := range pos3_set {

						possible_codon := nuc1 + nuc2 + nuc3
						possible_AA := codonDict[possible_codon]

						if possible_AA != AA {
							t.Errorf("problem in alphabet test: %s %s", possible_AA, AA)
						}
					}
				}
			}

		} else {
			continue
		}
	}

}

func TestComplement(t *testing.T) {
	inn := "ACGTRYSWKMBDHVN-?acgtryswkmbdhvn-?"
	out := "TGCAYRSWMKVHDBN-?tgcayrswmkvhdbn-?"

	if Complement(inn) != out {
		t.Errorf("Problem in TestComplement()")
	}
}

func TestReverseComplement(t *testing.T) {
	inn := "ACGTRYSWKMBDHVN-?acgtryswkmbdhvn-?"
	out := "?-nbdhvkmwsryacgt?-NBDHVKMWSRYACGT"

	if ReverseComplement(inn) != out {
		t.Errorf("Problem in TestReverseComplement()")
	}
}

func TestMakeEncodedCompArray(t *testing.T) {
	inn := "ACGTRYSWKMBDHVN"
	out := "TGCAYRSWMKVHDBN"

	CA := MakeEncodedCompArray()
	EA := encoding.MakeEncodingArray()
	DA := encoding.MakeDecodingArray()

	cb := make([]byte, 0)
	for _, b := range []byte(inn) {
		cb = append(cb, CA[EA[b]])
	}

	result := ""
	for _, b := range cb {
		result = result + DA[b]
	}

	if result != out {
		t.Errorf("Problem in TestMakeEncodedCompArray()")
		fmt.Println(result)
	}
}

var temp_spike_nuc_gb string
var temp_spike_AA_gb string

func init() {
	temp_spike_nuc_gb = `ATGTTTGTTTTTCTTGTTTTATTGCCACTAGTCTCTAGTCAGTGTGTTAATCTTACAACCAGAACTCAAT
TACCCCCTGCATACACTAATTCTTTCACACGTGGTGTTTATTACCCTGACAAAGTTTTCAGATCCTCAGT
TTTACATTCAACTCAGGACTTGTTCTTACCTTTCTTTTCCAATGTTACTTGGTTCCATGCTATACATGTC
TCTGGGACCAATGGTACTAAGAGGTTTGATAACCCTGTCCTACCATTTAATGATGGTGTTTATTTTGCTT
CCACTGAGAAGTCTAACATAATAAGAGGCTGGATTTTTGGTACTACTTTAGATTCGAAGACCCAGTCCCT
ACTTATTGTTAATAACGCTACTAATGTTGTTATTAAAGTCTGTGAATTTCAATTTTGTAATGATCCATTT
TTGGGTGTTTATTACCACAAAAACAACAAAAGTTGGATGGAAAGTGAGTTCAGAGTTTATTCTAGTGCGA
ATAATTGCACTTTTGAATATGTCTCTCAGCCTTTTCTTATGGACCTTGAAGGAAAACAGGGTAATTTCAA
AAATCTTAGGGAATTTGTGTTTAAGAATATTGATGGTTATTTTAAAATATATTCTAAGCACACGCCTATT
AATTTAGTGCGTGATCTCCCTCAGGGTTTTTCGGCTTTAGAACCATTGGTAGATTTGCCAATAGGTATTA
ACATCACTAGGTTTCAAACTTTACTTGCTTTACATAGAAGTTATTTGACTCCTGGTGATTCTTCTTCAGG
TTGGACAGCTGGTGCTGCAGCTTATTATGTGGGTTATCTTCAACCTAGGACTTTTCTATTAAAATATAAT
GAAAATGGAACCATTACAGATGCTGTAGACTGTGCACTTGACCCTCTCTCAGAAACAAAGTGTACGTTGA
AATCCTTCACTGTAGAAAAAGGAATCTATCAAACTTCTAACTTTAGAGTCCAACCAACAGAATCTATTGT
TAGATTTCCTAATATTACAAACTTGTGCCCTTTTGGTGAAGTTTTTAACGCCACCAGATTTGCATCTGTT
TATGCTTGGAACAGGAAGAGAATCAGCAACTGTGTTGCTGATTATTCTGTCCTATATAATTCCGCATCAT
TTTCCACTTTTAAGTGTTATGGAGTGTCTCCTACTAAATTAAATGATCTCTGCTTTACTAATGTCTATGC
AGATTCATTTGTAATTAGAGGTGATGAAGTCAGACAAATCGCTCCAGGGCAAACTGGAAAGATTGCTGAT
TATAATTATAAATTACCAGATGATTTTACAGGCTGCGTTATAGCTTGGAATTCTAACAATCTTGATTCTA
AGGTTGGTGGTAATTATAATTACCTGTATAGATTGTTTAGGAAGTCTAATCTCAAACCTTTTGAGAGAGA
TATTTCAACTGAAATCTATCAGGCCGGTAGCACACCTTGTAATGGTGTTGAAGGTTTTAATTGTTACTTT
CCTTTACAATCATATGGTTTCCAACCCACTAATGGTGTTGGTTACCAACCATACAGAGTAGTAGTACTTT
CTTTTGAACTTCTACATGCACCAGCAACTGTTTGTGGACCTAAAAAGTCTACTAATTTGGTTAAAAACAA
ATGTGTCAATTTCAACTTCAATGGTTTAACAGGCACAGGTGTTCTTACTGAGTCTAACAAAAAGTTTCTG
CCTTTCCAACAATTTGGCAGAGACATTGCTGACACTACTGATGCTGTCCGTGATCCACAGACACTTGAGA
TTCTTGACATTACACCATGTTCTTTTGGTGGTGTCAGTGTTATAACACCAGGAACAAATACTTCTAACCA
GGTTGCTGTTCTTTATCAGGATGTTAACTGCACAGAAGTCCCTGTTGCTATTCATGCAGATCAACTTACT
CCTACTTGGCGTGTTTATTCTACAGGTTCTAATGTTTTTCAAACACGTGCAGGCTGTTTAATAGGGGCTG
AACATGTCAACAACTCATATGAGTGTGACATACCCATTGGTGCAGGTATATGCGCTAGTTATCAGACTCA
GACTAATTCTCCTCGGCGGGCACGTAGTGTAGCTAGTCAATCCATCATTGCCTACACTATGTCACTTGGT
GCAGAAAATTCAGTTGCTTACTCTAATAACTCTATTGCCATACCCACAAATTTTACTATTAGTGTTACCA
CAGAAATTCTACCAGTGTCTATGACCAAGACATCAGTAGATTGTACAATGTACATTTGTGGTGATTCAAC
TGAATGCAGCAATCTTTTGTTGCAATATGGCAGTTTTTGTACACAATTAAACCGTGCTTTAACTGGAATA
GCTGTTGAACAAGACAAAAACACCCAAGAAGTTTTTGCACAAGTCAAACAAATTTACAAAACACCACCAA
TTAAAGATTTTGGTGGTTTTAATTTTTCACAAATATTACCAGATCCATCAAAACCAAGCAAGAGGTCATT
TATTGAAGATCTACTTTTCAACAAAGTGACACTTGCAGATGCTGGCTTCATCAAACAATATGGTGATTGC
CTTGGTGATATTGCTGCTAGAGACCTCATTTGTGCACAAAAGTTTAACGGCCTTACTGTTTTGCCACCTT
TGCTCACAGATGAAATGATTGCTCAATACACTTCTGCACTGTTAGCGGGTACAATCACTTCTGGTTGGAC
CTTTGGTGCAGGTGCTGCATTACAAATACCATTTGCTATGCAAATGGCTTATAGGTTTAATGGTATTGGA
GTTACACAGAATGTTCTCTATGAGAACCAAAAATTGATTGCCAACCAATTTAATAGTGCTATTGGCAAAA
TTCAAGACTCACTTTCTTCCACAGCAAGTGCACTTGGAAAACTTCAAGATGTGGTCAACCAAAATGCACA
AGCTTTAAACACGCTTGTTAAACAACTTAGCTCCAATTTTGGTGCAATTTCAAGTGTTTTAAATGATATC
CTTTCACGTCTTGACAAAGTTGAGGCTGAAGTGCAAATTGATAGGTTGATCACAGGCAGACTTCAAAGTT
TGCAGACATATGTGACTCAACAATTAATTAGAGCTGCAGAAATCAGAGCTTCTGCTAATCTTGCTGCTAC
TAAAATGTCAGAGTGTGTACTTGGACAATCAAAAAGAGTTGATTTTTGTGGAAAGGGCTATCATCTTATG
TCCTTCCCTCAGTCAGCACCTCATGGTGTAGTCTTCTTGCATGTGACTTATGTCCCTGCACAAGAAAAGA
ACTTCACAACTGCTCCTGCCATTTGTCATGATGGAAAAGCACACTTTCCTCGTGAAGGTGTCTTTGTTTC
AAATGGCACACACTGGTTTGTAACACAAAGGAATTTTTATGAACCACAAATCATTACTACAGACAACACA
TTTGTGTCTGGTAACTGTGATGTTGTAATAGGAATTGTCAACAACACAGTTTATGATCCTTTGCAACCTG
AATTAGACTCATTCAAGGAGGAGTTAGATAAATATTTTAAGAATCATACATCACCAGATGTTGATTTAGG
TGACATCTCTGGCATTAATGCTTCAGTTGTAAACATTCAAAAAGAAATTGACCGCCTCAATGAGGTTGCC
AAGAATTTAAATGAATCTCTCATCGATCTCCAAGAACTTGGAAAGTATGAGCAGTATATAAAATGGCCAT
GGTACATTTGGCTAGGTTTTATAGCTGGCTTGATTGCCATAGTAATGGTGACAATTATGCTTTGCTGTAT
GACCAGTTGCTGTAGTTGTCTCAAGGGCTGTTGTTCTTGTGGATCCTGCTGCAAATTTGATGAAGACGAC
TCTGAGCCAGTGCTCAAAGGAGTCAAATTACATTACACATAA`

	temp_spike_AA_gb = `MFVFLVLLPLVSSQCVNLTTRTQLPPAYTNSFTRGVYYPDKVFR
SSVLHSTQDLFLPFFSNVTWFHAIHVSGTNGTKRFDNPVLPFNDGVYFASTEKSNIIR
GWIFGTTLDSKTQSLLIVNNATNVVIKVCEFQFCNDPFLGVYYHKNNKSWMESEFRVY
SSANNCTFEYVSQPFLMDLEGKQGNFKNLREFVFKNIDGYFKIYSKHTPINLVRDLPQ
GFSALEPLVDLPIGINITRFQTLLALHRSYLTPGDSSSGWTAGAAAYYVGYLQPRTFL
LKYNENGTITDAVDCALDPLSETKCTLKSFTVEKGIYQTSNFRVQPTESIVRFPNITN
LCPFGEVFNATRFASVYAWNRKRISNCVADYSVLYNSASFSTFKCYGVSPTKLNDLCF
TNVYADSFVIRGDEVRQIAPGQTGKIADYNYKLPDDFTGCVIAWNSNNLDSKVGGNYN
YLYRLFRKSNLKPFERDISTEIYQAGSTPCNGVEGFNCYFPLQSYGFQPTNGVGYQPY
RVVVLSFELLHAPATVCGPKKSTNLVKNKCVNFNFNGLTGTGVLTESNKKFLPFQQFG
RDIADTTDAVRDPQTLEILDITPCSFGGVSVITPGTNTSNQVAVLYQDVNCTEVPVAI
HADQLTPTWRVYSTGSNVFQTRAGCLIGAEHVNNSYECDIPIGAGICASYQTQTNSPR
RARSVASQSIIAYTMSLGAENSVAYSNNSIAIPTNFTISVTTEILPVSMTKTSVDCTM
YICGDSTECSNLLLQYGSFCTQLNRALTGIAVEQDKNTQEVFAQVKQIYKTPPIKDFG
GFNFSQILPDPSKPSKRSFIEDLLFNKVTLADAGFIKQYGDCLGDIAARDLICAQKFN
GLTVLPPLLTDEMIAQYTSALLAGTITSGWTFGAGAALQIPFAMQMAYRFNGIGVTQN
VLYENQKLIANQFNSAIGKIQDSLSSTASALGKLQDVVNQNAQALNTLVKQLSSNFGA
ISSVLNDILSRLDKVEAEVQIDRLITGRLQSLQTYVTQQLIRAAEIRASANLAATKMS
ECVLGQSKRVDFCGKGYHLMSFPQSAPHGVVFLHVTYVPAQEKNFTTAPAICHDGKAH
FPREGVFVSNGTHWFVTQRNFYEPQIITTDNTFVSGNCDVVIGIVNNTVYDPLQPELD
SFKEELDKYFKNHTSPDVDLGDISGINASVVNIQKEIDRLNEVAKNLNESLIDLQELG
KYEQYIKWPWYIWLGFIAGLIAIVMVTIMLCCMTSCCSCLKGCCSCGSCCKFDEDDSE
PVLKGVKLHYT*`
}

// TODO: func TestDegenDict(t *testing.T){
//
// }
